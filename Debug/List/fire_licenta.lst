
AVRASM ver. 2.1.30  C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm Thu Jun 16 15:59:58 2022

C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1091): warning: Register r3 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1093): warning: Register r5 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1094): warning: Register r8 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1095): warning: Register r7 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1098): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _c=R4
                 	.DEF _q=R3
                 	.DEF _I_RH=R6
                 	.DEF _D_RH=R5
                 	.DEF _I_Temp=R8
                 	.DEF _D_Temp=R7
                 	.DEF _CheckSum=R10
                 	.DEF _MQ2=R11
                 	.DEF _MQ2_msb=R12
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00003e 2710
00003f 03e8
000040 0064
000041 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000042 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000043 1000
000044 0100
000045 0010
000046 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1150): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0
                 
                 _0x0:
000048 5420
000049 203a
00004a 6425
00004b 252e      	.DB  0x20,0x54,0x3A,0x20,0x25,0x64,0x2E,0x25
00004c 4364
00004d 2000
00004e 3a55
00004f 2520      	.DB  0x64,0x43,0x0,0x20,0x55,0x3A,0x20,0x25
000050 2e64
000051 6425
000052 2525
000053 0020      	.DB  0x64,0x2E,0x25,0x64,0x25,0x25,0x20,0x0
000054 4620
000055 4d55
000056 203a
000057 6425      	.DB  0x20,0x46,0x55,0x4D,0x3A,0x20,0x25,0x64
000058 7070
000059 206d
00005a 2000
00005b 6c41      	.DB  0x70,0x70,0x6D,0x20,0x0,0x20,0x41,0x6C
00005c 7261
00005d 616d
00005e 6161
00005f 0020      	.DB  0x61,0x72,0x6D,0x61,0x61,0x61,0x20,0x0
                 _0x2040060:
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1160): warning: .cseg .db misalignment - padding zero byte
000060 0001      	.DB  0x1
                 _0x2040000:
000061 4e2d
000062 4e41
000063 4900
000064 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\razvan\Desktop\licenta\fire_cod_bun\Debug\List\fire_licenta.asm(1163): warning: .cseg .db misalignment - padding zero byte
000065 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000066 0001      	.DW  0x01
000067 0004      	.DW  0x04
000068 008e      	.DW  __REG_VARS*2
                 
000069 0001      	.DW  0x01
00006a 0200      	.DW  __seed_G102
00006b 00c0      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00006c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006d 94f8      	CLI
00006e 27ee      	CLR  R30
00006f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000070 e0f1      	LDI  R31,1
000071 bff5      	OUT  MCUCR,R31
000072 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000073 e08d      	LDI  R24,(14-2)+1
000074 e0a2      	LDI  R26,2
000075 27bb      	CLR  R27
                 __CLEAR_REG:
000076 93ed      	ST   X+,R30
000077 958a      	DEC  R24
000078 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000079 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007b e0a0      	LDI  R26,LOW(__SRAM_START)
00007c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 ecec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000092 e0e0      	LDI  R30,__GPIOR0_INIT
000093 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000094 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000095 bfed      	OUT  SPL,R30
000096 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000097 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000098 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000099 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009a 940c 00dd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <io.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdint.h>
                 ;
                 ;#define DHT11_PIN 2     //pin PC2, 24
                 ;
                 ;
                 ;
                 ;//*************************************************************************************************
                 ;//*********** BEGIN SERIAL STUFF (interrupt-driven, generated by Code Wizard) *********************
                 ;//*************************************************************************************************
                 ;uint8_t c = 0;
                 ;uint8_t q;
                 ;uint8_t I_RH, D_RH, I_Temp, D_Temp, CheckSum;
                 ;int MQ2;
                 ;
                 ;
                 ;void Request()
                 ; 0000 0018 {
                 
                 	.CSEG
                 _Request:
                 ; .FSTART _Request
                 ; 0000 0019     DDRC |= (1<<DHT11_PIN);
00009c 9a3a      	SBI  0x7,2
                 ; 0000 001A     PORTC &= ~(1<<DHT11_PIN);    /* set to low pin */
00009d 9842      	CBI  0x8,2
                 ; 0000 001B     delay_ms(20);            /* wait for 20ms */
00009e e1a4      	LDI  R26,LOW(20)
00009f e0b0      	LDI  R27,0
0000a0 940e 0355 	CALL _delay_ms
                 ; 0000 001C     PORTC |= (1<<DHT11_PIN);    /* set to high pin */
0000a2 9a42      	SBI  0x8,2
                 ; 0000 001D }
0000a3 9508      	RET
                 ; .FEND
                 ;
                 ;void Response()                /* receive response from DHT11 */
                 ; 0000 0020 {
                 _Response:
                 ; .FSTART _Response
                 ; 0000 0021     DDRC &= ~(1<<DHT11_PIN);
0000a4 983a      	CBI  0x7,2
                 ; 0000 0022     while(PINC & (1<<DHT11_PIN));
                 _0x3:
0000a5 9932      	SBIC 0x6,2
0000a6 cffe      	RJMP _0x3
                 ; 0000 0023     while((PINC & (1<<DHT11_PIN))==0);
                 _0x6:
0000a7 9b32      	SBIS 0x6,2
0000a8 cffe      	RJMP _0x6
                 ; 0000 0024     while(PINC & (1<<DHT11_PIN));
                 _0x9:
0000a9 9932      	SBIC 0x6,2
0000aa cffe      	RJMP _0x9
                 ; 0000 0025 }
0000ab 9508      	RET
                 ; .FEND
                 ;
                 ;uint8_t Receive_data()            /* receive data */
                 ; 0000 0028 {
                 _Receive_data:
                 ; .FSTART _Receive_data
                 ; 0000 0029     for (q=0; q<8; q++)
0000ac 2433      	CLR  R3
                 _0xD:
0000ad e0e8      	LDI  R30,LOW(8)
0000ae 163e      	CP   R3,R30
0000af f488      	BRSH _0xE
                 ; 0000 002A     {
                 ; 0000 002B         while((PINC & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
                 _0xF:
0000b0 9b32      	SBIS 0x6,2
0000b1 cffe      	RJMP _0xF
                 ; 0000 002C         delay_us(30);
                +
0000b2 ec88     +LDI R24 , LOW ( 200 )
                +__DELAY_USB_LOOP :
0000b3 958a     +DEC R24
0000b4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 200
                 ; 0000 002D         if(PINC & (1<<DHT11_PIN))/* if high pulse is greater than 30ms */
0000b5 9b32      	SBIS 0x6,2
0000b6 c005      	RJMP _0x12
                 ; 0000 002E         c = (c<<1)|(0x01);    /* then its logic HIGH */
0000b7 2de4      	MOV  R30,R4
0000b8 0fee      	LSL  R30
0000b9 60e1      	ORI  R30,1
0000ba 2e4e      	MOV  R4,R30
                 ; 0000 002F         else            /* otherwise its logic LOW */
0000bb c001      	RJMP _0x13
                 _0x12:
                 ; 0000 0030         c = (c<<1);
0000bc 0c44      	LSL  R4
                 ; 0000 0031         while(PINC & (1<<DHT11_PIN));
                 _0x13:
                 _0x14:
0000bd 9932      	SBIC 0x6,2
0000be cffe      	RJMP _0x14
                 ; 0000 0032     }
0000bf 9433      	INC  R3
0000c0 cfec      	RJMP _0xD
                 _0xE:
                 ; 0000 0033     return c;
0000c1 2de4      	MOV  R30,R4
0000c2 9508      	RET
                 ; 0000 0034 }
                 ; .FEND
                 ;// Voltage Reference: AREF pin
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 003B {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 003C ADMUX=adc_input | ADC_VREF_TYPE;
0000c3 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000c4 81e8      	LD   R30,Y
0000c5 93e0 007c 	STS  124,R30
                 ; 0000 003D // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 003E delay_us(10);
                +
0000c7 e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
0000c8 958a     +DEC R24
0000c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 003F // Start the AD conversion
                 ; 0000 0040 ADCSRA|=(1<<ADSC);
0000ca 91e0 007a 	LDS  R30,122
0000cc 64e0      	ORI  R30,0x40
0000cd 93e0 007a 	STS  122,R30
                 ; 0000 0041 // Wait for the AD conversion to complete
                 ; 0000 0042 while ((ADCSRA & (1<<ADIF))==0);
                 _0x17:
0000cf 91e0 007a 	LDS  R30,122
0000d1 71e0      	ANDI R30,LOW(0x10)
0000d2 f3e1      	BREQ _0x17
                 ; 0000 0043 ADCSRA|=(1<<ADIF);
0000d3 91e0 007a 	LDS  R30,122
0000d5 61e0      	ORI  R30,0x10
0000d6 93e0 007a 	STS  122,R30
                 ; 0000 0044 return ADCW;
0000d8 91e0 0078 	LDS  R30,120
0000da 91f0 0079 	LDS  R31,120+1
0000dc c0cc      	RJMP _0x20A0001
                 ; 0000 0045 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0048 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0049 // Declare your local variables here
                 ; 0000 004A 
                 ; 0000 004B // Crystal Oscillator division factor: 1
                 ; 0000 004C #pragma optsize-
                 ; 0000 004D CLKPR=(1<<CLKPCE);
0000dd e8e0      	LDI  R30,LOW(128)
0000de 93e0 0061 	STS  97,R30
                 ; 0000 004E CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 93e0 0061 	STS  97,R30
                 ; 0000 004F #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0050 #pragma optsize+
                 ; 0000 0051 #endif
                 ; 0000 0052 
                 ; 0000 0053 // Input/Output Ports initialization
                 ; 0000 0054 // Port A initialization
                 ; 0000 0055 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0056 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000e3 b9e1      	OUT  0x1,R30
                 ; 0000 0057 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0058 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000e4 b9e2      	OUT  0x2,R30
                 ; 0000 0059 
                 ; 0000 005A // Port B initialization
                 ; 0000 005B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 005C DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000e5 efef      	LDI  R30,LOW(255)
0000e6 b9e4      	OUT  0x4,R30
                 ; 0000 005D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 005E PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 b9e5      	OUT  0x5,R30
                 ; 0000 005F 
                 ; 0000 0060 // Port C initialization
                 ; 0000 0061 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0062 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000e9 b9e7      	OUT  0x7,R30
                 ; 0000 0063 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0064 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ea b9e8      	OUT  0x8,R30
                 ; 0000 0065 
                 ; 0000 0066 // Port D initialization
                 ; 0000 0067 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0068 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000eb b9ea      	OUT  0xA,R30
                 ; 0000 0069 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 006A PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ec b9eb      	OUT  0xB,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 0 initialization
                 ; 0000 006D // Clock source: System Clock
                 ; 0000 006E // Clock value: Timer 0 Stopped
                 ; 0000 006F // Mode: Normal top=0xFF
                 ; 0000 0070 // OC0A output: Disconnected
                 ; 0000 0071 // OC0B output: Disconnected
                 ; 0000 0072 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000ed bde4      	OUT  0x24,R30
                 ; 0000 0073 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000ee bde5      	OUT  0x25,R30
                 ; 0000 0074 TCNT0=0x00;
0000ef bde6      	OUT  0x26,R30
                 ; 0000 0075 OCR0A=0x00;
0000f0 bde7      	OUT  0x27,R30
                 ; 0000 0076 OCR0B=0x00;
0000f1 bde8      	OUT  0x28,R30
                 ; 0000 0077 
                 ; 0000 0078 // Timer/Counter 1 initialization
                 ; 0000 0079 // Clock source: System Clock
                 ; 0000 007A // Clock value: Timer1 Stopped
                 ; 0000 007B // Mode: Normal top=0xFFFF
                 ; 0000 007C // OC1A output: Disconnected
                 ; 0000 007D // OC1B output: Disconnected
                 ; 0000 007E // Noise Canceler: Off
                 ; 0000 007F // Input Capture on Falling Edge
                 ; 0000 0080 // Timer1 Overflow Interrupt: Off
                 ; 0000 0081 // Input Capture Interrupt: Off
                 ; 0000 0082 // Compare A Match Interrupt: Off
                 ; 0000 0083 // Compare B Match Interrupt: Off
                 ; 0000 0084 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000f2 93e0 0080 	STS  128,R30
                 ; 0000 0085 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000f4 93e0 0081 	STS  129,R30
                 ; 0000 0086 TCNT1H=0x00;
0000f6 93e0 0085 	STS  133,R30
                 ; 0000 0087 TCNT1L=0x00;
0000f8 93e0 0084 	STS  132,R30
                 ; 0000 0088 ICR1H=0x00;
0000fa 93e0 0087 	STS  135,R30
                 ; 0000 0089 ICR1L=0x00;
0000fc 93e0 0086 	STS  134,R30
                 ; 0000 008A OCR1AH=0x00;
0000fe 93e0 0089 	STS  137,R30
                 ; 0000 008B OCR1AL=0x00;
000100 93e0 0088 	STS  136,R30
                 ; 0000 008C OCR1BH=0x00;
000102 93e0 008b 	STS  139,R30
                 ; 0000 008D OCR1BL=0x00;
000104 93e0 008a 	STS  138,R30
                 ; 0000 008E 
                 ; 0000 008F // Timer/Counter 2 initialization
                 ; 0000 0090 // Clock source: System Clock
                 ; 0000 0091 // Clock value: Timer2 Stopped
                 ; 0000 0092 // Mode: Normal top=0xFF
                 ; 0000 0093 // OC2A output: Disconnected
                 ; 0000 0094 // OC2B output: Disconnected
                 ; 0000 0095 ASSR=(0<<EXCLK) | (0<<AS2);
000106 93e0 00b6 	STS  182,R30
                 ; 0000 0096 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
000108 93e0 00b0 	STS  176,R30
                 ; 0000 0097 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00010a 93e0 00b1 	STS  177,R30
                 ; 0000 0098 TCNT2=0x00;
00010c 93e0 00b2 	STS  178,R30
                 ; 0000 0099 OCR2A=0x00;
00010e 93e0 00b3 	STS  179,R30
                 ; 0000 009A OCR2B=0x00;
000110 93e0 00b4 	STS  180,R30
                 ; 0000 009B 
                 ; 0000 009C // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 009D TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000112 93e0 006e 	STS  110,R30
                 ; 0000 009E 
                 ; 0000 009F // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 00A0 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
000114 93e0 006f 	STS  111,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 00A3 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
000116 93e0 0070 	STS  112,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // External Interrupt(s) initialization
                 ; 0000 00A6 // INT0: Off
                 ; 0000 00A7 // INT1: Off
                 ; 0000 00A8 // INT2: Off
                 ; 0000 00A9 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 00AA // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 00AB // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 00AC // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 00AD EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000118 93e0 0069 	STS  105,R30
                 ; 0000 00AE EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
00011a bbed      	OUT  0x1D,R30
                 ; 0000 00AF PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
00011b 93e0 0068 	STS  104,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // USART0 initialization
                 ; 0000 00B2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00B3 // USART0 Receiver: On
                 ; 0000 00B4 // USART0 Transmitter: On
                 ; 0000 00B5 // USART0 Mode: Asynchronous
                 ; 0000 00B6 // USART0 Baud Rate: 9600
                 ; 0000 00B7 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
00011d 93e0 00c0 	STS  192,R30
                 ; 0000 00B8 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
00011f e1e8      	LDI  R30,LOW(24)
000120 93e0 00c1 	STS  193,R30
                 ; 0000 00B9 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
000122 e0e6      	LDI  R30,LOW(6)
000123 93e0 00c2 	STS  194,R30
                 ; 0000 00BA UBRR0H=0x00;
000125 e0e0      	LDI  R30,LOW(0)
000126 93e0 00c5 	STS  197,R30
                 ; 0000 00BB UBRR0L=0x81;
000128 e8e1      	LDI  R30,LOW(129)
000129 93e0 00c4 	STS  196,R30
                 ; 0000 00BC 
                 ; 0000 00BD // USART1 initialization
                 ; 0000 00BE // USART1 disabled
                 ; 0000 00BF UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
00012b e0e0      	LDI  R30,LOW(0)
00012c 93e0 00c9 	STS  201,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Analog Comparator initialization
                 ; 0000 00C2 // Analog Comparator: Off
                 ; 0000 00C3 // The Analog Comparator's positive input is
                 ; 0000 00C4 // connected to the AIN0 pin
                 ; 0000 00C5 // The Analog Comparator's negative input is
                 ; 0000 00C6 // connected to the AIN1 pin
                 ; 0000 00C7 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00012e e8e0      	LDI  R30,LOW(128)
00012f bfe0      	OUT  0x30,R30
                 ; 0000 00C8 // Digital input buffer on AIN0: On
                 ; 0000 00C9 // Digital input buffer on AIN1: On
                 ; 0000 00CA DIDR1=(0<<AIN0D) | (0<<AIN1D);
000130 e0e0      	LDI  R30,LOW(0)
000131 93e0 007f 	STS  127,R30
                 ; 0000 00CB 
                 ; 0000 00CC // ADC initialization
                 ; 0000 00CD // ADC Clock frequency: 625.000 kHz
                 ; 0000 00CE // ADC Voltage Reference: AREF pin
                 ; 0000 00CF // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00D0 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 00D1 // ADC4: On, ADC5: On, ADC6: On, ADC7: On
                 ; 0000 00D2 DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
000133 93e0 007e 	STS  126,R30
                 ; 0000 00D3 ADMUX=ADC_VREF_TYPE;
000135 93e0 007c 	STS  124,R30
                 ; 0000 00D4 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000137 e8e5      	LDI  R30,LOW(133)
000138 93e0 007a 	STS  122,R30
                 ; 0000 00D5 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00013a e0e0      	LDI  R30,LOW(0)
00013b 93e0 007b 	STS  123,R30
                 ; 0000 00D6 
                 ; 0000 00D7 // SPI initialization
                 ; 0000 00D8 // SPI disabled
                 ; 0000 00D9 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00013d bdec      	OUT  0x2C,R30
                 ; 0000 00DA 
                 ; 0000 00DB // TWI initialization
                 ; 0000 00DC // TWI disabled
                 ; 0000 00DD TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00013e 93e0 00bc 	STS  188,R30
                 ; 0000 00DE 
                 ; 0000 00DF     PORTB |=(1<<PORTB5);
000140 9a2d      	SBI  0x5,5
                 ; 0000 00E0     PORTB &=~(1<<PORTB4);
000141 982c      	CBI  0x5,4
                 ; 0000 00E1     PORTB &=~(1<<PORTB6);
000142 982e      	CBI  0x5,6
                 ; 0000 00E2     PORTB |=(1<<PORTB7);
000143 9a2f      	SBI  0x5,7
                 ; 0000 00E3     while(1)
                 _0x1A:
                 ; 0000 00E4     {
                 ; 0000 00E5         //printf("test");
                 ; 0000 00E6         MQ2=read_adc(5)   ;
000144 e0a5      	LDI  R26,LOW(5)
000145 df7d      	RCALL _read_adc
                +
000146 2ebe     +MOV R11 , R30
000147 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 00E7         Request();
000148 df53      	RCALL _Request
                 ; 0000 00E8         Response();
000149 df5a      	RCALL _Response
                 ; 0000 00E9         I_RH = Receive_data();
00014a df61      	RCALL _Receive_data
00014b 2e6e      	MOV  R6,R30
                 ; 0000 00EA         D_RH = Receive_data();
00014c df5f      	RCALL _Receive_data
00014d 2e5e      	MOV  R5,R30
                 ; 0000 00EB         I_Temp = Receive_data();
00014e df5d      	RCALL _Receive_data
00014f 2e8e      	MOV  R8,R30
                 ; 0000 00EC         D_Temp = Receive_data();
000150 df5b      	RCALL _Receive_data
000151 2e7e      	MOV  R7,R30
                 ; 0000 00ED         CheckSum = Receive_data();
000152 df59      	RCALL _Receive_data
000153 2eae      	MOV  R10,R30
                 ; 0000 00EE 
                 ; 0000 00EF 
                 ; 0000 00F0         printf(" T: %d.%dC", I_Temp, D_Temp);
                +
000154 e9e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000155 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000156 93fa      	ST   -Y,R31
000157 93ea      	ST   -Y,R30
000158 2de8      	MOV  R30,R8
000159 940e 032a 	CALL SUBOPT_0x0
00015b 2de7      	MOV  R30,R7
00015c 940e 032a 	CALL SUBOPT_0x0
00015e e088      	LDI  R24,8
00015f d18c      	RCALL _printf
000160 962a      	ADIW R28,10
                 ; 0000 00F1         printf(" U: %d.%d%% ", I_RH, D_RH);  //unde p reprezinta procentele
                +
000161 e9eb     +LDI R30 , LOW ( 2 * _0x0 + ( 11 ) )
000162 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW1FN _0x0,11
000163 93fa      	ST   -Y,R31
000164 93ea      	ST   -Y,R30
000165 2de6      	MOV  R30,R6
000166 940e 032a 	CALL SUBOPT_0x0
000168 2de5      	MOV  R30,R5
000169 940e 032a 	CALL SUBOPT_0x0
00016b e088      	LDI  R24,8
00016c d17f      	RCALL _printf
00016d 962a      	ADIW R28,10
                 ; 0000 00F2         printf(" FUM: %dppm ", MQ2);
                +
00016e eae8     +LDI R30 , LOW ( 2 * _0x0 + ( 24 ) )
00016f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW1FN _0x0,24
000170 93fa      	ST   -Y,R31
000171 93ea      	ST   -Y,R30
                +
000172 2deb     +MOV R30 , R11
000173 2dfc     +MOV R31 , R12
                 	__GETW1R 11,12
000174 940e 0367 	CALL __CWD1
000176 940e 0374 	CALL __PUTPARD1
000178 e084      	LDI  R24,4
000179 d172      	RCALL _printf
00017a 9626      	ADIW R28,6
                 ; 0000 00F3             /* Send value to string */
                 ; 0000 00F4 
                 ; 0000 00F5         if(I_Temp > 30 || I_RH < 35 || MQ2 > 1200)
00017b e1ee      	LDI  R30,LOW(30)
00017c 15e8      	CP   R30,R8
00017d f040      	BRLO _0x1E
00017e e2e3      	LDI  R30,LOW(35)
00017f 166e      	CP   R6,R30
000180 f028      	BRLO _0x1E
000181 ebe0      	LDI  R30,LOW(1200)
000182 e0f4      	LDI  R31,HIGH(1200)
000183 15eb      	CP   R30,R11
000184 05fc      	CPC  R31,R12
000185 f48c      	BRGE _0x1D
                 _0x1E:
                 ; 0000 00F6         {
                 ; 0000 00F7             /* Buzzer is On */
                 ; 0000 00F8             PORTB |=(1<<PORTB4);
000186 9a2c      	SBI  0x5,4
                 ; 0000 00F9             PORTB |=(1<<PORTB6);
000187 9a2e      	SBI  0x5,6
                 ; 0000 00FA             delay_ms(2000);
000188 eda0      	LDI  R26,LOW(2000)
000189 e0b7      	LDI  R27,HIGH(2000)
00018a 940e 0355 	CALL _delay_ms
                 ; 0000 00FB             PORTB &=~(1<<PORTB6);
00018c 982e      	CBI  0x5,6
                 ; 0000 00FC             PORTB &=~(1<<PORTB5);
00018d 982d      	CBI  0x5,5
                 ; 0000 00FD             PORTB &=~(1<<PORTB7);
00018e 982f      	CBI  0x5,7
                 ; 0000 00FE             /* Set LED state high */
                 ; 0000 00FF             printf(" Alarmaaa ");
                +
00018f ebe5     +LDI R30 , LOW ( 2 * _0x0 + ( 37 ) )
000190 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 37 ) )
                 	__POINTW1FN _0x0,37
000191 93fa      	ST   -Y,R31
000192 93ea      	ST   -Y,R30
000193 e080      	LDI  R24,0
000194 d157      	RCALL _printf
000195 9622      	ADIW R28,2
                 ; 0000 0100         }
                 ; 0000 0101         else
000196 c004      	RJMP _0x20
                 _0x1D:
                 ; 0000 0102         {
                 ; 0000 0103             PORTB &=~(1<<PORTB4);
000197 982c      	CBI  0x5,4
                 ; 0000 0104             PORTB &=~(1<<PORTB6);
000198 982e      	CBI  0x5,6
                 ; 0000 0105             PORTB |=(1<<PORTB5);
000199 9a2d      	SBI  0x5,5
                 ; 0000 0106             PORTB |=(1<<PORTB7);
00019a 9a2f      	SBI  0x5,7
                 ; 0000 0107         }
                 _0x20:
                 ; 0000 0108 
                 ; 0000 0109 
                 ; 0000 010A         delay_ms(2500);
00019b eca4      	LDI  R26,LOW(2500)
00019c e0b9      	LDI  R27,HIGH(2500)
00019d 940e 0355 	CALL _delay_ms
                 ; 0000 010B     }
00019f cfa4      	RJMP _0x1A
                 ; 0000 010C 
                 ; 0000 010D }
                 _0x21:
0001a0 cfff      	RJMP _0x21
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0001a1 93aa      	ST   -Y,R26
                 _0x2000006:
0001a2 91e0 00c0 	LDS  R30,192
0001a4 72e0      	ANDI R30,LOW(0x20)
0001a5 f3e1      	BREQ _0x2000006
0001a6 81e8      	LD   R30,Y
0001a7 93e0 00c6 	STS  198,R30
                 _0x20A0001:
0001a9 9621      	ADIW R28,1
0001aa 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0001ab 93ba      	ST   -Y,R27
0001ac 93aa      	ST   -Y,R26
0001ad 81aa      	LDD  R26,Y+2
0001ae dff2      	RCALL _putchar
0001af 81a8      	LD   R26,Y
0001b0 81b9      	LDD  R27,Y+1
0001b1 91ed      	LD   R30,X+
0001b2 91fd      	LD   R31,X+
0001b3 9631      	ADIW R30,1
0001b4 93fe      	ST   -X,R31
0001b5 93ee      	ST   -X,R30
0001b6 9623      	ADIW R28,3
0001b7 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0001b8 93ba      	ST   -Y,R27
0001b9 93aa      	ST   -Y,R26
0001ba 9726      	SBIW R28,6
0001bb 940e 0379 	CALL __SAVELOCR6
0001bd e010      	LDI  R17,0
0001be 85ac      	LDD  R26,Y+12
0001bf 85bd      	LDD  R27,Y+12+1
0001c0 e0e0      	LDI  R30,LOW(0)
0001c1 e0f0      	LDI  R31,HIGH(0)
0001c2 93ed      	ST   X+,R30
0001c3 93fc      	ST   X,R31
                 _0x200001C:
0001c4 89ea      	LDD  R30,Y+18
0001c5 89fb      	LDD  R31,Y+18+1
0001c6 9631      	ADIW R30,1
0001c7 8bea      	STD  Y+18,R30
0001c8 8bfb      	STD  Y+18+1,R31
0001c9 9731      	SBIW R30,1
0001ca 91e4      	LPM  R30,Z
0001cb 2f2e      	MOV  R18,R30
0001cc 30e0      	CPI  R30,0
0001cd f409      	BRNE PC+2
0001ce c115      	RJMP _0x200001E
0001cf 2fe1      	MOV  R30,R17
0001d0 30e0      	CPI  R30,0
0001d1 f439      	BRNE _0x2000022
0001d2 3225      	CPI  R18,37
0001d3 f411      	BRNE _0x2000023
0001d4 e011      	LDI  R17,LOW(1)
0001d5 c002      	RJMP _0x2000024
                 _0x2000023:
0001d6 940e 0330 	CALL SUBOPT_0x1
                 _0x2000024:
0001d8 c10a      	RJMP _0x2000021
                 _0x2000022:
0001d9 30e1      	CPI  R30,LOW(0x1)
0001da f4a9      	BRNE _0x2000025
0001db 3225      	CPI  R18,37
0001dc f419      	BRNE _0x2000026
0001dd 940e 0330 	CALL SUBOPT_0x1
0001df c102      	RJMP _0x20000D2
                 _0x2000026:
0001e0 e012      	LDI  R17,LOW(2)
0001e1 e040      	LDI  R20,LOW(0)
0001e2 e000      	LDI  R16,LOW(0)
0001e3 322d      	CPI  R18,45
0001e4 f411      	BRNE _0x2000027
0001e5 e001      	LDI  R16,LOW(1)
0001e6 c0fc      	RJMP _0x2000021
                 _0x2000027:
0001e7 322b      	CPI  R18,43
0001e8 f411      	BRNE _0x2000028
0001e9 e24b      	LDI  R20,LOW(43)
0001ea c0f8      	RJMP _0x2000021
                 _0x2000028:
0001eb 3220      	CPI  R18,32
0001ec f411      	BRNE _0x2000029
0001ed e240      	LDI  R20,LOW(32)
0001ee c0f4      	RJMP _0x2000021
                 _0x2000029:
0001ef c002      	RJMP _0x200002A
                 _0x2000025:
0001f0 30e2      	CPI  R30,LOW(0x2)
0001f1 f439      	BRNE _0x200002B
                 _0x200002A:
0001f2 e050      	LDI  R21,LOW(0)
0001f3 e013      	LDI  R17,LOW(3)
0001f4 3320      	CPI  R18,48
0001f5 f411      	BRNE _0x200002C
0001f6 6800      	ORI  R16,LOW(128)
0001f7 c0eb      	RJMP _0x2000021
                 _0x200002C:
0001f8 c003      	RJMP _0x200002D
                 _0x200002B:
0001f9 30e3      	CPI  R30,LOW(0x3)
0001fa f009      	BREQ PC+2
0001fb c0e7      	RJMP _0x2000021
                 _0x200002D:
0001fc 3320      	CPI  R18,48
0001fd f010      	BRLO _0x2000030
0001fe 332a      	CPI  R18,58
0001ff f008      	BRLO _0x2000031
                 _0x2000030:
000200 c007      	RJMP _0x200002F
                 _0x2000031:
000201 e0aa      	LDI  R26,LOW(10)
000202 9f5a      	MUL  R21,R26
000203 2d50      	MOV  R21,R0
000204 2fe2      	MOV  R30,R18
000205 53e0      	SUBI R30,LOW(48)
000206 0f5e      	ADD  R21,R30
000207 c0db      	RJMP _0x2000021
                 _0x200002F:
000208 2fe2      	MOV  R30,R18
000209 36e3      	CPI  R30,LOW(0x63)
00020a f449      	BRNE _0x2000035
00020b 940e 0337 	CALL SUBOPT_0x2
00020d 89e8      	LDD  R30,Y+16
00020e 89f9      	LDD  R31,Y+16+1
00020f 81a4      	LDD  R26,Z+4
000210 93aa      	ST   -Y,R26
000211 940e 033d 	CALL SUBOPT_0x3
000213 c0ce      	RJMP _0x2000036
                 _0x2000035:
000214 37e3      	CPI  R30,LOW(0x73)
000215 f441      	BRNE _0x2000038
000216 940e 0337 	CALL SUBOPT_0x2
000218 940e 0343 	CALL SUBOPT_0x4
00021a 940e 0311 	CALL _strlen
00021c 2f1e      	MOV  R17,R30
00021d c00a      	RJMP _0x2000039
                 _0x2000038:
00021e 37e0      	CPI  R30,LOW(0x70)
00021f f461      	BRNE _0x200003B
000220 940e 0337 	CALL SUBOPT_0x2
000222 940e 0343 	CALL SUBOPT_0x4
000224 940e 031d 	CALL _strlenf
000226 2f1e      	MOV  R17,R30
000227 6008      	ORI  R16,LOW(8)
                 _0x2000039:
000228 6002      	ORI  R16,LOW(2)
000229 770f      	ANDI R16,LOW(127)
00022a e030      	LDI  R19,LOW(0)
00022b c034      	RJMP _0x200003C
                 _0x200003B:
00022c 36e4      	CPI  R30,LOW(0x64)
00022d f011      	BREQ _0x200003F
00022e 36e9      	CPI  R30,LOW(0x69)
00022f f411      	BRNE _0x2000040
                 _0x200003F:
000230 6004      	ORI  R16,LOW(4)
000231 c002      	RJMP _0x2000041
                 _0x2000040:
000232 37e5      	CPI  R30,LOW(0x75)
000233 f431      	BRNE _0x2000042
                 _0x2000041:
000234 e7ec      	LDI  R30,LOW(_tbl10_G100*2)
000235 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000236 83ee      	STD  Y+6,R30
000237 83ff      	STD  Y+6+1,R31
000238 e015      	LDI  R17,LOW(5)
000239 c00c      	RJMP _0x2000043
                 _0x2000042:
00023a 35e8      	CPI  R30,LOW(0x58)
00023b f411      	BRNE _0x2000045
00023c 6008      	ORI  R16,LOW(8)
00023d c003      	RJMP _0x2000046
                 _0x2000045:
00023e 37e8      	CPI  R30,LOW(0x78)
00023f f009      	BREQ PC+2
000240 c0a1      	RJMP _0x2000077
                 _0x2000046:
000241 e8e6      	LDI  R30,LOW(_tbl16_G100*2)
000242 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000243 83ee      	STD  Y+6,R30
000244 83ff      	STD  Y+6+1,R31
000245 e014      	LDI  R17,LOW(4)
                 _0x2000043:
000246 ff02      	SBRS R16,2
000247 c014      	RJMP _0x2000048
000248 940e 0337 	CALL SUBOPT_0x2
00024a 940e 034d 	CALL SUBOPT_0x5
00024c 85ab      	LDD  R26,Y+11
00024d 23aa      	TST  R26
00024e f43a      	BRPL _0x2000049
00024f 85ea      	LDD  R30,Y+10
000250 85fb      	LDD  R31,Y+10+1
000251 940e 0363 	CALL __ANEGW1
000253 87ea      	STD  Y+10,R30
000254 87fb      	STD  Y+10+1,R31
000255 e24d      	LDI  R20,LOW(45)
                 _0x2000049:
000256 3040      	CPI  R20,0
000257 f011      	BREQ _0x200004A
000258 5f1f      	SUBI R17,-LOW(1)
000259 c001      	RJMP _0x200004B
                 _0x200004A:
00025a 7f0b      	ANDI R16,LOW(251)
                 _0x200004B:
00025b c004      	RJMP _0x200004C
                 _0x2000048:
00025c 940e 0337 	CALL SUBOPT_0x2
00025e 940e 034d 	CALL SUBOPT_0x5
                 _0x200004C:
                 _0x200003C:
000260 fd00      	SBRC R16,0
000261 c011      	RJMP _0x200004D
                 _0x200004E:
000262 1715      	CP   R17,R21
000263 f478      	BRSH _0x2000050
000264 ff07      	SBRS R16,7
000265 c008      	RJMP _0x2000051
000266 ff02      	SBRS R16,2
000267 c004      	RJMP _0x2000052
000268 7f0b      	ANDI R16,LOW(251)
000269 2f24      	MOV  R18,R20
00026a 5011      	SUBI R17,LOW(1)
00026b c001      	RJMP _0x2000053
                 _0x2000052:
00026c e320      	LDI  R18,LOW(48)
                 _0x2000053:
00026d c001      	RJMP _0x2000054
                 _0x2000051:
00026e e220      	LDI  R18,LOW(32)
                 _0x2000054:
00026f 940e 0330 	CALL SUBOPT_0x1
000271 5051      	SUBI R21,LOW(1)
000272 cfef      	RJMP _0x200004E
                 _0x2000050:
                 _0x200004D:
000273 2f31      	MOV  R19,R17
000274 ff01      	SBRS R16,1
000275 c017      	RJMP _0x2000055
                 _0x2000056:
000276 3030      	CPI  R19,0
000277 f0a1      	BREQ _0x2000058
000278 ff03      	SBRS R16,3
000279 c006      	RJMP _0x2000059
00027a 81ee      	LDD  R30,Y+6
00027b 81ff      	LDD  R31,Y+6+1
00027c 9125      	LPM  R18,Z+
00027d 83ee      	STD  Y+6,R30
00027e 83ff      	STD  Y+6+1,R31
00027f c005      	RJMP _0x200005A
                 _0x2000059:
000280 81ae      	LDD  R26,Y+6
000281 81bf      	LDD  R27,Y+6+1
000282 912d      	LD   R18,X+
000283 83ae      	STD  Y+6,R26
000284 83bf      	STD  Y+6+1,R27
                 _0x200005A:
000285 940e 0330 	CALL SUBOPT_0x1
000287 3050      	CPI  R21,0
000288 f009      	BREQ _0x200005B
000289 5051      	SUBI R21,LOW(1)
                 _0x200005B:
00028a 5031      	SUBI R19,LOW(1)
00028b cfea      	RJMP _0x2000056
                 _0x2000058:
00028c c04b      	RJMP _0x200005C
                 _0x2000055:
                 _0x200005E:
00028d e320      	LDI  R18,LOW(48)
00028e 81ee      	LDD  R30,Y+6
00028f 81ff      	LDD  R31,Y+6+1
000290 940e 0370 	CALL __GETW1PF
000292 87e8      	STD  Y+8,R30
000293 87f9      	STD  Y+8+1,R31
000294 81ee      	LDD  R30,Y+6
000295 81ff      	LDD  R31,Y+6+1
000296 9632      	ADIW R30,2
000297 83ee      	STD  Y+6,R30
000298 83ff      	STD  Y+6+1,R31
                 _0x2000060:
000299 85e8      	LDD  R30,Y+8
00029a 85f9      	LDD  R31,Y+8+1
00029b 85aa      	LDD  R26,Y+10
00029c 85bb      	LDD  R27,Y+10+1
00029d 17ae      	CP   R26,R30
00029e 07bf      	CPC  R27,R31
00029f f050      	BRLO _0x2000062
0002a0 5f2f      	SUBI R18,-LOW(1)
0002a1 85a8      	LDD  R26,Y+8
0002a2 85b9      	LDD  R27,Y+8+1
0002a3 85ea      	LDD  R30,Y+10
0002a4 85fb      	LDD  R31,Y+10+1
0002a5 1bea      	SUB  R30,R26
0002a6 0bfb      	SBC  R31,R27
0002a7 87ea      	STD  Y+10,R30
0002a8 87fb      	STD  Y+10+1,R31
0002a9 cfef      	RJMP _0x2000060
                 _0x2000062:
0002aa 332a      	CPI  R18,58
0002ab f028      	BRLO _0x2000063
0002ac ff03      	SBRS R16,3
0002ad c002      	RJMP _0x2000064
0002ae 5f29      	SUBI R18,-LOW(7)
0002af c001      	RJMP _0x2000065
                 _0x2000064:
0002b0 5d29      	SUBI R18,-LOW(39)
                 _0x2000065:
                 _0x2000063:
0002b1 fd04      	SBRC R16,4
0002b2 c01a      	RJMP _0x2000067
0002b3 3321      	CPI  R18,49
0002b4 f420      	BRSH _0x2000069
0002b5 85a8      	LDD  R26,Y+8
0002b6 85b9      	LDD  R27,Y+8+1
0002b7 9711      	SBIW R26,1
0002b8 f409      	BRNE _0x2000068
                 _0x2000069:
0002b9 c009      	RJMP _0x20000D3
                 _0x2000068:
0002ba 1753      	CP   R21,R19
0002bb f010      	BRLO _0x200006D
0002bc ff00      	SBRS R16,0
0002bd c001      	RJMP _0x200006E
                 _0x200006D:
0002be c013      	RJMP _0x200006C
                 _0x200006E:
0002bf e220      	LDI  R18,LOW(32)
0002c0 ff07      	SBRS R16,7
0002c1 c00b      	RJMP _0x200006F
0002c2 e320      	LDI  R18,LOW(48)
                 _0x20000D3:
0002c3 6100      	ORI  R16,LOW(16)
0002c4 ff02      	SBRS R16,2
0002c5 c007      	RJMP _0x2000070
0002c6 7f0b      	ANDI R16,LOW(251)
0002c7 934a      	ST   -Y,R20
0002c8 940e 033d 	CALL SUBOPT_0x3
0002ca 3050      	CPI  R21,0
0002cb f009      	BREQ _0x2000071
0002cc 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x2000070:
                 _0x200006F:
                 _0x2000067:
0002cd 940e 0330 	CALL SUBOPT_0x1
0002cf 3050      	CPI  R21,0
0002d0 f009      	BREQ _0x2000072
0002d1 5051      	SUBI R21,LOW(1)
                 _0x2000072:
                 _0x200006C:
0002d2 5031      	SUBI R19,LOW(1)
0002d3 85a8      	LDD  R26,Y+8
0002d4 85b9      	LDD  R27,Y+8+1
0002d5 9712      	SBIW R26,2
0002d6 f008      	BRLO _0x200005F
0002d7 cfb5      	RJMP _0x200005E
                 _0x200005F:
                 _0x200005C:
0002d8 ff00      	SBRS R16,0
0002d9 c008      	RJMP _0x2000073
                 _0x2000074:
0002da 3050      	CPI  R21,0
0002db f031      	BREQ _0x2000076
0002dc 5051      	SUBI R21,LOW(1)
0002dd e2e0      	LDI  R30,LOW(32)
0002de 93ea      	ST   -Y,R30
0002df 940e 033d 	CALL SUBOPT_0x3
0002e1 cff8      	RJMP _0x2000074
                 _0x2000076:
                 _0x2000073:
                 _0x2000077:
                 _0x2000036:
                 _0x20000D2:
0002e2 e010      	LDI  R17,LOW(0)
                 _0x2000021:
0002e3 cee0      	RJMP _0x200001C
                 _0x200001E:
0002e4 85ac      	LDD  R26,Y+12
0002e5 85bd      	LDD  R27,Y+12+1
0002e6 940e 036c 	CALL __GETW1P
0002e8 940e 0380 	CALL __LOADLOCR6
0002ea 9664      	ADIW R28,20
0002eb 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002ec 92ff      	PUSH R15
0002ed 2ef8      	MOV  R15,R24
0002ee 9726      	SBIW R28,6
0002ef 931a      	ST   -Y,R17
0002f0 930a      	ST   -Y,R16
0002f1 01de      	MOVW R26,R28
0002f2 9614      	ADIW R26,4
0002f3 940e 035f 	CALL __ADDW2R15
0002f5 018d      	MOVW R16,R26
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 83ec      	STD  Y+4,R30
0002f8 83ed      	STD  Y+4+1,R30
0002f9 83ee      	STD  Y+6,R30
0002fa 83ef      	STD  Y+6+1,R30
0002fb 01de      	MOVW R26,R28
0002fc 9618      	ADIW R26,8
0002fd 940e 035f 	CALL __ADDW2R15
0002ff 940e 036c 	CALL __GETW1P
000301 93fa      	ST   -Y,R31
000302 93ea      	ST   -Y,R30
000303 931a      	ST   -Y,R17
000304 930a      	ST   -Y,R16
000305 eaeb      	LDI  R30,LOW(_put_usart_G100)
000306 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000307 93fa      	ST   -Y,R31
000308 93ea      	ST   -Y,R30
000309 01de      	MOVW R26,R28
00030a 9618      	ADIW R26,8
00030b deac      	RCALL __print_G100
00030c 8119      	LDD  R17,Y+1
00030d 8108      	LDD  R16,Y+0
00030e 9628      	ADIW R28,8
00030f 90ff      	POP  R15
000310 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000311 93ba      	ST   -Y,R27
000312 93aa      	ST   -Y,R26
000313 91a9          ld   r26,y+
000314 91b9          ld   r27,y+
000315 27ee          clr  r30
000316 27ff          clr  r31
                 strlen0:
000317 916d          ld   r22,x+
000318 2366          tst  r22
000319 f011          breq strlen1
00031a 9631          adiw r30,1
00031b cffb          rjmp strlen0
                 strlen1:
00031c 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00031d 93ba      	ST   -Y,R27
00031e 93aa      	ST   -Y,R26
00031f 27aa          clr  r26
000320 27bb          clr  r27
000321 91e9          ld   r30,y+
000322 91f9          ld   r31,y+
                 strlenf0:
000323 9005      	lpm  r0,z+
000324 2000          tst  r0
000325 f011          breq strlenf1
000326 9611          adiw r26,1
000327 cffb          rjmp strlenf0
                 strlenf1:
000328 01fd          movw r30,r26
000329 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G102:
000200           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
00032a 27ff      	CLR  R31
00032b 2766      	CLR  R22
00032c 2777      	CLR  R23
00032d 940e 0374 	CALL __PUTPARD1
00032f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000330 932a      	ST   -Y,R18
000331 85ad      	LDD  R26,Y+13
000332 85be      	LDD  R27,Y+13+1
000333 85ef      	LDD  R30,Y+15
000334 89f8      	LDD  R31,Y+15+1
000335 9509      	ICALL
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000337 89e8      	LDD  R30,Y+16
000338 89f9      	LDD  R31,Y+16+1
000339 9734      	SBIW R30,4
00033a 8be8      	STD  Y+16,R30
00033b 8bf9      	STD  Y+16+1,R31
00033c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00033d 85ad      	LDD  R26,Y+13
00033e 85be      	LDD  R27,Y+13+1
00033f 85ef      	LDD  R30,Y+15
000340 89f8      	LDD  R31,Y+15+1
000341 9509      	ICALL
000342 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000343 89a8      	LDD  R26,Y+16
000344 89b9      	LDD  R27,Y+16+1
000345 9614      	ADIW R26,4
000346 940e 036c 	CALL __GETW1P
000348 83ee      	STD  Y+6,R30
000349 83ff      	STD  Y+6+1,R31
00034a 81ae      	LDD  R26,Y+6
00034b 81bf      	LDD  R27,Y+6+1
00034c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
00034d 89a8      	LDD  R26,Y+16
00034e 89b9      	LDD  R27,Y+16+1
00034f 9614      	ADIW R26,4
000350 940e 036c 	CALL __GETW1P
000352 87ea      	STD  Y+10,R30
000353 87fb      	STD  Y+10+1,R31
000354 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000355 9610      	adiw r26,0
000356 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000357 e888     +LDI R24 , LOW ( 0x1388 )
000358 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000359 9701     +SBIW R24 , 1
00035a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
00035b 95a8      	wdr
00035c 9711      	sbiw r26,1
00035d f7c9      	brne __delay_ms0
                 __delay_ms1:
00035e 9508      	ret
                 
                 __ADDW2R15:
00035f 2400      	CLR  R0
000360 0daf      	ADD  R26,R15
000361 1db0      	ADC  R27,R0
000362 9508      	RET
                 
                 __ANEGW1:
000363 95f1      	NEG  R31
000364 95e1      	NEG  R30
000365 40f0      	SBCI R31,0
000366 9508      	RET
                 
                 __CWD1:
000367 2f6f      	MOV  R22,R31
000368 0f66      	ADD  R22,R22
000369 0b66      	SBC  R22,R22
00036a 2f76      	MOV  R23,R22
00036b 9508      	RET
                 
                 __GETW1P:
00036c 91ed      	LD   R30,X+
00036d 91fc      	LD   R31,X
00036e 9711      	SBIW R26,1
00036f 9508      	RET
                 
                 __GETW1PF:
000370 9005      	LPM  R0,Z+
000371 91f4      	LPM  R31,Z
000372 2de0      	MOV  R30,R0
000373 9508      	RET
                 
                 __PUTPARD1:
000374 937a      	ST   -Y,R23
000375 936a      	ST   -Y,R22
000376 93fa      	ST   -Y,R31
000377 93ea      	ST   -Y,R30
000378 9508      	RET
                 
                 __SAVELOCR6:
000379 935a      	ST   -Y,R21
                 __SAVELOCR5:
00037a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00037b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00037c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00037d 931a      	ST   -Y,R17
00037e 930a      	ST   -Y,R16
00037f 9508      	RET
                 
                 __LOADLOCR6:
000380 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000381 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000382 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000383 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000384 8119      	LDD  R17,Y+1
000385 8108      	LD   R16,Y
000386 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   3 r4 :   4 r5 :   2 r6 :   3 r7 :   2 
r8 :   3 r9 :   0 r10:   1 r11:   3 r12:   3 r13:   0 r14:   0 r15:   4 
r16:  30 r17:  19 r18:  27 r19:   8 r20:   9 r21:  17 r22:  12 r23:   3 
r24:  18 r25:   3 r26:  55 r27:  29 r28:  14 r29:   1 r30: 201 r31:  58 
x  :  13 y  : 132 z  :  13 
Registers used: 31 out of 35 (88.6%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  19 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  15 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  39 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   2 cpi   :  29 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  32 ld    :  14 ldd   :  57 ldi   :  86 
lds   :   6 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  29 movw  :   8 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   9 out   :  22 pop   :   1 push  :   1 rcall :  14 ret   :  24 
reti  :   0 rjmp  :  62 rol   :   0 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   8 sbic  :   3 sbis  :   3 sbiw  :  12 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  47 std   :  28 sts   :  39 sub   :   1 subi  :  13 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00070e   1712     94   1806   16384  11.0%
[.dseg] 0x000100 0x000204      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
