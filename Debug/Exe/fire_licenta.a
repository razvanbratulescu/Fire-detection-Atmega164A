;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <io.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdint.h>
;#define DHT11_PIN 2     //pin PC2, 24
;uint8_t c = 0;
;uint8_t q;
;uint8_t I_RH, D_RH, I_Temp, D_Temp, CheckSum;
;int MQ2;
;void Request()
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F     DDRC |= (1<<DHT11_PIN);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0010     PORTC &= ~(1<<DHT11_PIN);    /* set to low pin */
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0011     delay_ms(20);            /* wait for 20ms */
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0012     PORTC |= (1<<DHT11_PIN);    /* set to high pin */
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0013 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;void Response()                /* receive response from DHT11 */
; 0000 0015 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0016     DDRC &= ~(1<<DHT11_PIN);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0017     while(PINC & (1<<DHT11_PIN));
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0018     while((PINC & (1<<DHT11_PIN))==0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0019     while(PINC & (1<<DHT11_PIN));
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001A }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;uint8_t Receive_data()            /* receive data */
; 0000 001C {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001D     for (q=0; q<8; q++)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 001E     {
; 0000 001F         while((PINC & (1<<DHT11_PIN)) == 0);  /* check received bit 0 or 1 */
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0020         delay_us(30);
;PCODE: $00000041 VOL: 0
; 0000 0021         if(PINC & (1<<DHT11_PIN))
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0022         c = (c<<1)|(0x01);    /* then its logic HIGH */
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0023         else            /* otherwise its logic LOW */
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0024         c = (c<<1);
;PCODE: $0000004B VOL: 0
; 0000 0025         while(PINC & (1<<DHT11_PIN));
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0026     }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0027     return c;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0028 }
;PCODE: $00000059 VOL: 0
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 002C {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 002D ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000005C VOL: 0
;	adc_input -> Y+0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002E delay_us(10);
;PCODE: $00000060 VOL: 0
; 0000 002F ADCSRA|=(1<<ADSC);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0030 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0031 ADCSRA|=(1<<ADIF);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0032 return ADCW;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0033 }
;PCODE: $00000070 VOL: 0
;
;void main(void)
; 0000 0036 {
;PCODE: $00000071 VOL: 0
; 0000 0037 #pragma optsize-
; 0000 0038 CLKPR=(1<<CLKPCE);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0039 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 003A #ifdef _OPTIMIZE_SIZE_
; 0000 003B #pragma optsize+
; 0000 003C #endif
; 0000 003D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 003E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 003F DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0040 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0041 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0042 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0043 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0044 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0045 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0046 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0047 TCNT0=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0048 OCR0A=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0049 OCR0B=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 004B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004C TCNT1H=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 004D TCNT1L=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 004E ICR1H=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 004F ICR1L=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0050 OCR1AH=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0051 OCR1AL=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0052 OCR1BH=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0053 OCR1BL=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0054 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0055 TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0056 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0057 TCNT2=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0058 OCR2A=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0059 OCR2B=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005A TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 005B TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 005C TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 005D EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 005E EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 005F PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0060 UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0061 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0062 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0063 UBRR0H=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0064 UBRR0L=0x81;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0065 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (0<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0066 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0067 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0068 DIDR0=(0<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0069 ADMUX=ADC_VREF_TYPE;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 006A ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 006B ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 006C SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 006D TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 006E 
; 0000 006F     PORTB |=(1<<PORTB5);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0070     PORTB &=~(1<<PORTB4);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0071     PORTB &=~(1<<PORTB6);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0072     PORTB |=(1<<PORTB7);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0073     while(1)
;PCODE: $000000E0 VOL: 0
; 0000 0074     {
; 0000 0075         MQ2=read_adc(5)   ;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0076         Request();
;PCODE: $000000E4 VOL: 0
; 0000 0077         Response();
;PCODE: $000000E5 VOL: 0
; 0000 0078         I_RH = Receive_data();
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0079         D_RH = Receive_data();
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 007A         I_Temp = Receive_data();
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 007B         D_Temp = Receive_data();
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007C         CheckSum = Receive_data();
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 007D         printf(" T: %d.%dC", I_Temp, D_Temp);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 007E         printf(" U: %d.%d%% ", I_RH, D_RH);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 007F         printf(" FUM: %dppm ", MQ2);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0080             /* Send value to string */
; 0000 0081 
; 0000 0082         if(I_Temp > 30 || I_RH < 35 || MQ2 > 400)
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0083         {
; 0000 0084             /* Buzzer este pornit*/
; 0000 0085             PORTB |=(1<<PORTB4);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0086             PORTB |=(1<<PORTB6);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0087             delay_ms(2000);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0088             PORTB &=~(1<<PORTB6);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0089             PORTB &=~(1<<PORTB5);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 008A             PORTB &=~(1<<PORTB7);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 008B             /* Strarea leudului este HIGH*/
; 0000 008C         }
; 0000 008D         else
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 008E         {
; 0000 008F             PORTB &=~(1<<PORTB4);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0090             PORTB &=~(1<<PORTB6);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0091 			PORTB |=(1<<PORTB5);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0092             PORTB |=(1<<PORTB7);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0093 
; 0000 0094 
; 0000 0095         delay_ms(2500);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0096     }
;PCODE: $00000137 VOL: 0
; 0000 0097 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
